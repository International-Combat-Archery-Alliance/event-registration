//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ErrorCode.
const (
	AlreadyExists        ErrorCode = "AlreadyExists"
	AuthError            ErrorCode = "AuthError"
	EmptyBody            ErrorCode = "EmptyBody"
	InputValidationError ErrorCode = "InputValidationError"
	InternalError        ErrorCode = "InternalError"
	InvalidBody          ErrorCode = "InvalidBody"
	InvalidCursor        ErrorCode = "InvalidCursor"
	LimitOutOfBounds     ErrorCode = "LimitOutOfBounds"
	NotFound             ErrorCode = "NotFound"
	RegistrationClosed   ErrorCode = "RegistrationClosed"
)

// Defines values for ExperienceLevel.
const (
	Advanced     ExperienceLevel = "Advanced"
	Intermediate ExperienceLevel = "Intermediate"
	Novice       ExperienceLevel = "Novice"
)

// Defines values for RegistrationType.
const (
	ByIndividual RegistrationType = "ByIndividual"
	ByTeam       RegistrationType = "ByTeam"
)

// Address defines model for Address.
type Address struct {
	// City City or town
	City string `json:"city"`

	// Country Country
	Country string `json:"country"`

	// PostalCode Postal code
	PostalCode string `json:"postalCode"`

	// State State or province
	State string `json:"state"`

	// Street Street address
	Street string `json:"street"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// Event defines model for Event.
type Event struct {
	AllowedTeamSizeRange  Range               `json:"allowedTeamSizeRange"`
	EndTime               time.Time           `json:"endTime"`
	Id                    *openapi_types.UUID `json:"id,omitempty"`
	Location              Location            `json:"location"`
	Name                  string              `json:"name"`
	RegistrationCloseTime time.Time           `json:"registrationCloseTime"`
	RegistrationTypes     []RegistrationType  `json:"registrationTypes"`
	RulesDocLink          *string             `json:"rulesDocLink,omitempty"`
	SignUpStats           *SignUpStats        `json:"signUpStats,omitempty"`
	StartTime             time.Time           `json:"startTime"`
	Version               *int                `json:"version,omitempty"`
}

// ExperienceLevel defines model for ExperienceLevel.
type ExperienceLevel string

// IndividualRegistration defines model for IndividualRegistration.
type IndividualRegistration struct {
	Email            openapi_types.Email `json:"email"`
	EventId          *openapi_types.UUID `json:"eventId,omitempty"`
	Experience       ExperienceLevel     `json:"experience"`
	HomeCity         string              `json:"homeCity"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Paid             *bool               `json:"paid,omitempty"`
	PlayerInfo       PlayerInfo          `json:"playerInfo"`
	RegisteredAt     *time.Time          `json:"registeredAt,omitempty"`
	RegistrationType RegistrationType    `json:"registrationType"`
	Version          *int                `json:"version,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Address Address `json:"address"`
	Name    string  `json:"name"`
}

// PlayerInfo defines model for PlayerInfo.
type PlayerInfo struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// Range defines model for Range.
type Range struct {
	Max int `json:"max"`
	Min int `json:"min"`
}

// Registration defines model for Registration.
type Registration struct {
	union json.RawMessage
}

// RegistrationType defines model for RegistrationType.
type RegistrationType string

// SignUpStats defines model for SignUpStats.
type SignUpStats struct {
	NumRosteredPlayers int `json:"numRosteredPlayers"`
	NumTeams           int `json:"numTeams"`
	NumTotalPlayers    int `json:"numTotalPlayers"`
}

// TeamRegistration defines model for TeamRegistration.
type TeamRegistration struct {
	CaptainEmail     openapi_types.Email `json:"captainEmail"`
	EventId          *openapi_types.UUID `json:"eventId,omitempty"`
	HomeCity         string              `json:"homeCity"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Paid             *bool               `json:"paid,omitempty"`
	Players          []PlayerInfo        `json:"players"`
	RegisteredAt     *time.Time          `json:"registeredAt,omitempty"`
	RegistrationType RegistrationType    `json:"registrationType"`
	TeamName         string              `json:"teamName"`
	Version          *int                `json:"version,omitempty"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Cursor Cursor of where to start from
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max amount of events to fetch
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEventsEventIdRegistrationsParams defines parameters for GetEventsEventIdRegistrations.
type GetEventsEventIdRegistrationsParams struct {
	// Cursor Cursor of where to start from
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max amount of registrations to fetch
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody = Event

// PostEventsEventIdRegisterJSONRequestBody defines body for PostEventsEventIdRegister for application/json ContentType.
type PostEventsEventIdRegisterJSONRequestBody = Registration

// AsIndividualRegistration returns the union data inside the Registration as a IndividualRegistration
func (t Registration) AsIndividualRegistration() (IndividualRegistration, error) {
	var body IndividualRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIndividualRegistration overwrites any union data inside the Registration as the provided IndividualRegistration
func (t *Registration) FromIndividualRegistration(v IndividualRegistration) error {
	v.RegistrationType = "ByIndividual"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIndividualRegistration performs a merge with any union data inside the Registration, using the provided IndividualRegistration
func (t *Registration) MergeIndividualRegistration(v IndividualRegistration) error {
	v.RegistrationType = "ByIndividual"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTeamRegistration returns the union data inside the Registration as a TeamRegistration
func (t Registration) AsTeamRegistration() (TeamRegistration, error) {
	var body TeamRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamRegistration overwrites any union data inside the Registration as the provided TeamRegistration
func (t *Registration) FromTeamRegistration(v TeamRegistration) error {
	v.RegistrationType = "ByTeam"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamRegistration performs a merge with any union data inside the Registration, using the provided TeamRegistration
func (t *Registration) MergeTeamRegistration(v TeamRegistration) error {
	v.RegistrationType = "ByTeam"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Registration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"registrationType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Registration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ByIndividual":
		return t.AsIndividualRegistration()
	case "ByTeam":
		return t.AsTeamRegistration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Registration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Registration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all events
	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request, params GetEventsParams)
	// Create a new event
	// (POST /events)
	PostEvents(w http.ResponseWriter, r *http.Request)
	// Sign up for an event
	// (POST /events/{eventId}/register)
	PostEventsEventIdRegister(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Get all registrations for an event
	// (GET /events/{eventId}/registrations)
	GetEventsEventIdRegistrations(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID, params GetEventsEventIdRegistrationsParams)
	// Get an event
	// (GET /events/{id})
	GetEventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostEvents operation middleware
func (siw *ServerInterfaceWrapper) PostEvents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostEventsEventIdRegister operation middleware
func (siw *ServerInterfaceWrapper) PostEventsEventIdRegister(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", r.PathValue("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEventsEventIdRegister(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsEventIdRegistrations operation middleware
func (siw *ServerInterfaceWrapper) GetEventsEventIdRegistrations(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", r.PathValue("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsEventIdRegistrationsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsEventIdRegistrations(w, r, eventId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsId operation middleware
func (siw *ServerInterfaceWrapper) GetEventsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/events", wrapper.GetEvents)
	m.HandleFunc("POST "+options.BaseURL+"/events", wrapper.PostEvents)
	m.HandleFunc("POST "+options.BaseURL+"/events/{eventId}/register", wrapper.PostEventsEventIdRegister)
	m.HandleFunc("GET "+options.BaseURL+"/events/{eventId}/registrations", wrapper.GetEventsEventIdRegistrations)
	m.HandleFunc("GET "+options.BaseURL+"/events/{id}", wrapper.GetEventsId)

	return m
}

type GetEventsRequestObject struct {
	Params GetEventsParams
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse struct {
	Cursor      *string `json:"cursor,omitempty"`
	Data        []Event `json:"data"`
	HasNextPage bool    `json:"hasNextPage"`
}

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents400JSONResponse Error

func (response GetEvents400JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents500JSONResponse Error

func (response GetEvents500JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsRequestObject struct {
	Body *PostEventsJSONRequestBody
}

type PostEventsResponseObject interface {
	VisitPostEventsResponse(w http.ResponseWriter) error
}

type PostEvents200JSONResponse Event

func (response PostEvents200JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents400JSONResponse Error

func (response PostEvents400JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents500JSONResponse Error

func (response PostEvents500JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsEventIdRegisterRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Body    *PostEventsEventIdRegisterJSONRequestBody
}

type PostEventsEventIdRegisterResponseObject interface {
	VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error
}

type PostEventsEventIdRegister200JSONResponse struct {
	Registration Registration `json:"registration"`
}

func (response PostEventsEventIdRegister200JSONResponse) VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsEventIdRegister400JSONResponse Error

func (response PostEventsEventIdRegister400JSONResponse) VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsEventIdRegister403JSONResponse Error

func (response PostEventsEventIdRegister403JSONResponse) VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsEventIdRegister404JSONResponse Error

func (response PostEventsEventIdRegister404JSONResponse) VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsEventIdRegister409JSONResponse Error

func (response PostEventsEventIdRegister409JSONResponse) VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsEventIdRegister500JSONResponse Error

func (response PostEventsEventIdRegister500JSONResponse) VisitPostEventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsEventIdRegistrationsRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Params  GetEventsEventIdRegistrationsParams
}

type GetEventsEventIdRegistrationsResponseObject interface {
	VisitGetEventsEventIdRegistrationsResponse(w http.ResponseWriter) error
}

type GetEventsEventIdRegistrations200JSONResponse struct {
	Cursor      *string        `json:"cursor,omitempty"`
	Data        []Registration `json:"data"`
	HasNextPage bool           `json:"hasNextPage"`
}

func (response GetEventsEventIdRegistrations200JSONResponse) VisitGetEventsEventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsEventIdRegistrations400JSONResponse Error

func (response GetEventsEventIdRegistrations400JSONResponse) VisitGetEventsEventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsEventIdRegistrations500JSONResponse Error

func (response GetEventsEventIdRegistrations500JSONResponse) VisitGetEventsEventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetEventsIdResponseObject interface {
	VisitGetEventsIdResponse(w http.ResponseWriter) error
}

type GetEventsId200JSONResponse struct {
	Event Event `json:"event"`
}

func (response GetEventsId200JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsId400JSONResponse Error

func (response GetEventsId400JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsId404JSONResponse Error

func (response GetEventsId404JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsId500JSONResponse Error

func (response GetEventsId500JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all events
	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)
	// Create a new event
	// (POST /events)
	PostEvents(ctx context.Context, request PostEventsRequestObject) (PostEventsResponseObject, error)
	// Sign up for an event
	// (POST /events/{eventId}/register)
	PostEventsEventIdRegister(ctx context.Context, request PostEventsEventIdRegisterRequestObject) (PostEventsEventIdRegisterResponseObject, error)
	// Get all registrations for an event
	// (GET /events/{eventId}/registrations)
	GetEventsEventIdRegistrations(ctx context.Context, request GetEventsEventIdRegistrationsRequestObject) (GetEventsEventIdRegistrationsResponseObject, error)
	// Get an event
	// (GET /events/{id})
	GetEventsId(ctx context.Context, request GetEventsIdRequestObject) (GetEventsIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(w http.ResponseWriter, r *http.Request, params GetEventsParams) {
	var request GetEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEvents operation middleware
func (sh *strictHandler) PostEvents(w http.ResponseWriter, r *http.Request) {
	var request PostEventsRequestObject

	var body PostEventsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEvents(ctx, request.(PostEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsResponseObject); ok {
		if err := validResponse.VisitPostEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEventsEventIdRegister operation middleware
func (sh *strictHandler) PostEventsEventIdRegister(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request PostEventsEventIdRegisterRequestObject

	request.EventId = eventId

	var body PostEventsEventIdRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEventsEventIdRegister(ctx, request.(PostEventsEventIdRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEventsEventIdRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsEventIdRegisterResponseObject); ok {
		if err := validResponse.VisitPostEventsEventIdRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsEventIdRegistrations operation middleware
func (sh *strictHandler) GetEventsEventIdRegistrations(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID, params GetEventsEventIdRegistrationsParams) {
	var request GetEventsEventIdRegistrationsRequestObject

	request.EventId = eventId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsEventIdRegistrations(ctx, request.(GetEventsEventIdRegistrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsEventIdRegistrations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsEventIdRegistrationsResponseObject); ok {
		if err := validResponse.VisitGetEventsEventIdRegistrationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsId operation middleware
func (sh *strictHandler) GetEventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetEventsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsId(ctx, request.(GetEventsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsIdResponseObject); ok {
		if err := validResponse.VisitGetEventsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xabW/bOBL+KwTvPqq2bMd3iYAFznHTrhdpGiRpD5ciHxhxbLMrkVqScuIt/N8PJCVb",
	"lOSXtE1f7jYfWlsiOW/PPDPD5BOORZoJDlwrHH3CKp5DSuzHEaUSlP2YSZGB1Azst5jppfmfgoolyzQT",
	"HEd4zPQSCYm0eOA4wPBI0iwBHOERXxbPUvJ4Dnym5zgahgFOGS+/DgKsl5lZrbRkfIZXAY5FzrVsk1S8",
	"qAp5dz3aKaDfIiATSpNkLCg0ZVzadyg2L6tyTsJ+L/Ql9febojTRLUKuzWPjs0yKBeOxL2r8dIuUlgC6",
	"TZB5jkgR0aqUXn+A3hDG0bWumTUc7rFrFWAJf+RMAsXRh1J44PBRGu25eRPUu/Vp4v4jxNpofyalkC1w",
	"KwL0dwlTHOG/dTeI7RZw7dqtVsQqwCkoRWZ2TxWFKOfwmEGsgSIw65GI41xKoB28z7YCB+XJW7UvwQQ8",
	"T82+CdcgOUmcaQE+ZynTb3P9dnoqck5NKCZ8QRJGx7lUdsmF0K/MOxzgszTTy1NBl5tlxbdRIoHQ5dkj",
	"U9occgUzprQkJt7jRCigdkuW6/dml31e6jDK9dx9vmuB0NkCuG4GgSSJeAB6AyS9Zn/CFeGzvUFxi1YB",
	"Bk5vWFoLSD/sD1+Exy96Jzf9fhSGURh2wjC8xQGeCpkSjSNMiYYX2mxt0ZRR/8Cw+HnR8k/5Uz08z5nx",
	"knHkW54scaRlDi1yEhETl0e7zT0v160CzEnd3Ml4NELjPEPG7qdmmtGyFuAdDv3nTX8QDU+i4cnTHFqV",
	"cbPMXOCZhlTtjXRtp81Cxidub28ti0hJllZUnoB6KeJzxn83h3s0F7YxG5vxd5khzL3KXFeWOu6Veif8",
	"esfR0T+i4aDTOx4e7q0FSFWgYn1qbyucGNcwA9kgFgvB8qgCNxXIVdXf5NE2OLSFMGhPXd+jrXz2mIFk",
	"wGM4hwUkVVa7EAtmi5WltxQoc0w/ogvCY6DmvAry/UUNR044ZQtGc5JUYdSkIEgJS/wgfiQcOlTAv4pH",
	"nVik1QC6LV6y9cL95RoMB06+Eb3A2s97i1wtIqsAz0UK46Ida3RcAWp0RYdY/614NSM1SW7dln33QiRA",
	"LLlmCVmCnPCp2Oexy83KNb+BBDrSX0YGe22r5+HnEOjXIZiGJkGdc0q01xwUrLNnDTLP9R5yi2i28ch5",
	"pXzWeorNgLHLN+Uc0lpWC6ijsUjTnJsRZAyGb54K+5rXCh4uNWyz69JDoW/ZlEmlLxrK/kY47Ozpe23t",
	"B2k76qV46kk1CzcqVkS02blu9XwTU/LoaeRaGJaaCtFrotK+rUN5vSHcC2Oz29rbrmOtcFBmpp+UcaLd",
	"RJGSLDNeiD7h0+Wm4GyD3JaSFODTpSmj27aZd94GQ1bOa0sXwmY6rgIsOLyd4ujD7jTYotMq2L2tqdNd",
	"zWElP5XV3XPQ2mSvpNeWNDB77XdrPnJ4nl4JRzMuh5QPpHA3MAJzgFHJ39Y7aJvQJGkVOjwAjT7venRR",
	"ahS0WdcU3YbhRqCagzDJNGH8rNkHFW9+5jbo/7iTOXzO8vuZ3RPWz9XsaCBps8rdzAG9YrO5ZnyG3gg+",
	"E0LZmeaJQPjurdTaPK+b8hJ6g4atzZRRiBUNh3/BN+JodDlBUyFRSjiZGX9ZZRQinCIz65lHeWaXuDf2",
	"1ovpze2EvfpBtYq3dh3udcJOaOtVBpxkDEd4YB8ZffXcgrfrjjYfZ20XkVegJYMFKERQwpRGYopIkhQa",
	"YXu2E214B78GfVa+yYgkKWibLh8aV8L29syc9jAHCUgLZAdnNJWWCk3vgf/Iwd4auy4Sx+WNm8Olj7z/",
	"9E/y28Fvc/rrGzX5NVnQ69P0fvA+vx2fhuT1u9ntv1/9SV+/X05ev+e3D7/80naDWFfyDXlEJBU5t2YX",
	"4dECTUHH8y1KJixl2tORwpTkiXYVzy9/5NEVMK+EtjRjqzsDUJUJrlxl6Yehu2nlurj9I1mWMNe4dz8q",
	"lzobHWp1yTnyK/svMCREDqZGd2+5ahLhnKgLeNSX9Rvhdk6upbxVwT+jPS1r6bgGd5lqqwAfPdHJe++7",
	"2ySfEoqMAaC0FTr8FkLf8d+5GcIUyAVId7nesb5UeZoSuXSpXM304tcvLUxGU8YRcJoJxrVJj1gC0YAI",
	"4vDgtjd44lKoDVEU5tub8q9mukNX03THmVqgeygUpbgKIYOy1Rdm22cpZkpnoZBz2l8YxOMmksyComh1",
	"PxXle9Utq7flulaYmgmnLKeE74XlmTv5qjx3TzmbvDTcoeewPtjWBlNmN6Wh2mxU4dZe0D6z960Xtbvn",
	"yS9/Qm1Gt/r+mbPNr22yNpE9wYjtzeNBNaSawNXN3yWPnczB88u8ELZMiAegJs5lIhZGHz2/Ao7QmUJc",
	"aDQVOff0QA9Mz50uJ8+vy7VIQXAw2hD3C1/byQM1zJNzChLpOVPIzfc/EtO20uMurnXY3j44lO2Dt3o3",
	"+66HB498S0E/LQMHzz779PqDo+HTBxo/NP+jc83waNDvffGwUr8k/rFmFi+Qf7WNh3CPR22MrnbymKF0",
	"uxbdL5HN8S3EZanly2mKfY8e8atlIZR/kHTIGORngtt6aLMF5Q3Cd0H7N2xu1p3ND5hmm4Qy7+zqNtxf",
	"SkHz2E4DbhEOcC4THOG51pmKul2SsQ6LCek8CJnQ7qKHm/XrXMQkQRQWbYdE3W5i3s+F0tFxeBzaM+5W",
	"/w0AAP//u5KtHTIrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
