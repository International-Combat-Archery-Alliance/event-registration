//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ErrorCode.
const (
	AlreadyExists        ErrorCode = "AlreadyExists"
	AuthError            ErrorCode = "AuthError"
	EmptyBody            ErrorCode = "EmptyBody"
	InputValidationError ErrorCode = "InputValidationError"
	InternalError        ErrorCode = "InternalError"
	InvalidBody          ErrorCode = "InvalidBody"
	InvalidCursor        ErrorCode = "InvalidCursor"
	LimitOutOfBounds     ErrorCode = "LimitOutOfBounds"
	NotFound             ErrorCode = "NotFound"
	RegistrationClosed   ErrorCode = "RegistrationClosed"
)

// Defines values for ExperienceLevel.
const (
	Advanced     ExperienceLevel = "Advanced"
	Intermediate ExperienceLevel = "Intermediate"
	Novice       ExperienceLevel = "Novice"
)

// Defines values for RegistrationType.
const (
	ByIndividual RegistrationType = "ByIndividual"
	ByTeam       RegistrationType = "ByTeam"
)

// Address defines model for Address.
type Address struct {
	// City City or town
	City string `json:"city"`

	// Country Country
	Country string `json:"country"`

	// PostalCode Postal code
	PostalCode string `json:"postalCode"`

	// State State or province
	State string `json:"state"`

	// Street Street address
	Street string `json:"street"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// Event defines model for Event.
type Event struct {
	AllowedTeamSizeRange Range               `json:"allowedTeamSizeRange"`
	EndTime              time.Time           `json:"endTime"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`

	// ImageName A file name that exists in the UI assets to use as the logo.
	ImageName             *string                   `json:"imageName,omitempty"`
	Location              Location                  `json:"location"`
	Name                  string                    `json:"name"`
	RegistrationCloseTime time.Time                 `json:"registrationCloseTime"`
	RegistrationOptions   []EventRegistrationOption `json:"registrationOptions"`
	RulesDocLink          *string                   `json:"rulesDocLink,omitempty"`
	SignUpStats           *SignUpStats              `json:"signUpStats,omitempty"`
	StartTime             time.Time                 `json:"startTime"`
	Version               *int                      `json:"version,omitempty"`
}

// EventRegistrationOption defines model for EventRegistrationOption.
type EventRegistrationOption struct {
	Price            Money            `json:"price"`
	RegistrationType RegistrationType `json:"registrationType"`
}

// ExperienceLevel defines model for ExperienceLevel.
type ExperienceLevel string

// IndividualRegistration defines model for IndividualRegistration.
type IndividualRegistration struct {
	Email            openapi_types.Email `json:"email"`
	EventId          *openapi_types.UUID `json:"eventId,omitempty"`
	Experience       ExperienceLevel     `json:"experience"`
	HomeCity         string              `json:"homeCity"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Paid             *bool               `json:"paid,omitempty"`
	PlayerInfo       PlayerInfo          `json:"playerInfo"`
	RegisteredAt     *time.Time          `json:"registeredAt,omitempty"`
	RegistrationType RegistrationType    `json:"registrationType"`
	Version          *int                `json:"version,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Address Address `json:"address"`
	Name    string  `json:"name"`
}

// Money defines model for Money.
type Money struct {
	// Amount Minor units of money (i.e. 100 == $1 in USD)
	Amount   int    `json:"amount"`
	Currency string `json:"currency"`
}

// PlayerInfo defines model for PlayerInfo.
type PlayerInfo struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// Range defines model for Range.
type Range struct {
	Max int `json:"max"`
	Min int `json:"min"`
}

// Registration defines model for Registration.
type Registration struct {
	union json.RawMessage
}

// RegistrationType defines model for RegistrationType.
type RegistrationType string

// SignUpStats defines model for SignUpStats.
type SignUpStats struct {
	NumRosteredPlayers int `json:"numRosteredPlayers"`
	NumTeams           int `json:"numTeams"`
	NumTotalPlayers    int `json:"numTotalPlayers"`
}

// TeamRegistration defines model for TeamRegistration.
type TeamRegistration struct {
	CaptainEmail     openapi_types.Email `json:"captainEmail"`
	EventId          *openapi_types.UUID `json:"eventId,omitempty"`
	HomeCity         string              `json:"homeCity"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Paid             *bool               `json:"paid,omitempty"`
	Players          []PlayerInfo        `json:"players"`
	RegisteredAt     *time.Time          `json:"registeredAt,omitempty"`
	RegistrationType RegistrationType    `json:"registrationType"`
	TeamName         string              `json:"teamName"`
	Version          *int                `json:"version,omitempty"`
}

// GetV1EventsParams defines parameters for GetV1Events.
type GetV1EventsParams struct {
	// Cursor Cursor of where to start from
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max amount of events to fetch
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetV1EventsEventIdRegistrationsParams defines parameters for GetV1EventsEventIdRegistrations.
type GetV1EventsEventIdRegistrationsParams struct {
	// Cursor Cursor of where to start from
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max amount of registrations to fetch
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostV1EventsJSONRequestBody defines body for PostV1Events for application/json ContentType.
type PostV1EventsJSONRequestBody = Event

// PostV1EventsEventIdRegisterJSONRequestBody defines body for PostV1EventsEventIdRegister for application/json ContentType.
type PostV1EventsEventIdRegisterJSONRequestBody = Registration

// AsIndividualRegistration returns the union data inside the Registration as a IndividualRegistration
func (t Registration) AsIndividualRegistration() (IndividualRegistration, error) {
	var body IndividualRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIndividualRegistration overwrites any union data inside the Registration as the provided IndividualRegistration
func (t *Registration) FromIndividualRegistration(v IndividualRegistration) error {
	v.RegistrationType = "ByIndividual"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIndividualRegistration performs a merge with any union data inside the Registration, using the provided IndividualRegistration
func (t *Registration) MergeIndividualRegistration(v IndividualRegistration) error {
	v.RegistrationType = "ByIndividual"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTeamRegistration returns the union data inside the Registration as a TeamRegistration
func (t Registration) AsTeamRegistration() (TeamRegistration, error) {
	var body TeamRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamRegistration overwrites any union data inside the Registration as the provided TeamRegistration
func (t *Registration) FromTeamRegistration(v TeamRegistration) error {
	v.RegistrationType = "ByTeam"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamRegistration performs a merge with any union data inside the Registration, using the provided TeamRegistration
func (t *Registration) MergeTeamRegistration(v TeamRegistration) error {
	v.RegistrationType = "ByTeam"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Registration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"registrationType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Registration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ByIndividual":
		return t.AsIndividualRegistration()
	case "ByTeam":
		return t.AsTeamRegistration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Registration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Registration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all events
	// (GET /v1/events)
	GetV1Events(w http.ResponseWriter, r *http.Request, params GetV1EventsParams)
	// Create a new event
	// (POST /v1/events)
	PostV1Events(w http.ResponseWriter, r *http.Request)
	// Sign up for an event
	// (POST /v1/events/{eventId}/register)
	PostV1EventsEventIdRegister(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Get all registrations for an event
	// (GET /v1/events/{eventId}/registrations)
	GetV1EventsEventIdRegistrations(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID, params GetV1EventsEventIdRegistrationsParams)
	// Get an event
	// (GET /v1/events/{id})
	GetV1EventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1Events operation middleware
func (siw *ServerInterfaceWrapper) GetV1Events(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1EventsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Events(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1Events operation middleware
func (siw *ServerInterfaceWrapper) PostV1Events(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Events(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1EventsEventIdRegister operation middleware
func (siw *ServerInterfaceWrapper) PostV1EventsEventIdRegister(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", r.PathValue("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1EventsEventIdRegister(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV1EventsEventIdRegistrations operation middleware
func (siw *ServerInterfaceWrapper) GetV1EventsEventIdRegistrations(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", r.PathValue("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1EventsEventIdRegistrationsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1EventsEventIdRegistrations(w, r, eventId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV1EventsId operation middleware
func (siw *ServerInterfaceWrapper) GetV1EventsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1EventsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/events", wrapper.GetV1Events)
	m.HandleFunc("POST "+options.BaseURL+"/v1/events", wrapper.PostV1Events)
	m.HandleFunc("POST "+options.BaseURL+"/v1/events/{eventId}/register", wrapper.PostV1EventsEventIdRegister)
	m.HandleFunc("GET "+options.BaseURL+"/v1/events/{eventId}/registrations", wrapper.GetV1EventsEventIdRegistrations)
	m.HandleFunc("GET "+options.BaseURL+"/v1/events/{id}", wrapper.GetV1EventsId)

	return m
}

type GetV1EventsRequestObject struct {
	Params GetV1EventsParams
}

type GetV1EventsResponseObject interface {
	VisitGetV1EventsResponse(w http.ResponseWriter) error
}

type GetV1Events200JSONResponse struct {
	Cursor      *string `json:"cursor,omitempty"`
	Data        []Event `json:"data"`
	HasNextPage bool    `json:"hasNextPage"`
}

func (response GetV1Events200JSONResponse) VisitGetV1EventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Events400JSONResponse Error

func (response GetV1Events400JSONResponse) VisitGetV1EventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Events500JSONResponse Error

func (response GetV1Events500JSONResponse) VisitGetV1EventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsRequestObject struct {
	Body *PostV1EventsJSONRequestBody
}

type PostV1EventsResponseObject interface {
	VisitPostV1EventsResponse(w http.ResponseWriter) error
}

type PostV1Events200JSONResponse Event

func (response PostV1Events200JSONResponse) VisitPostV1EventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1Events400JSONResponse Error

func (response PostV1Events400JSONResponse) VisitPostV1EventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1Events500JSONResponse Error

func (response PostV1Events500JSONResponse) VisitPostV1EventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsEventIdRegisterRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Body    *PostV1EventsEventIdRegisterJSONRequestBody
}

type PostV1EventsEventIdRegisterResponseObject interface {
	VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error
}

type PostV1EventsEventIdRegister200JSONResponse struct {
	Registration Registration `json:"registration"`
}

func (response PostV1EventsEventIdRegister200JSONResponse) VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsEventIdRegister400JSONResponse Error

func (response PostV1EventsEventIdRegister400JSONResponse) VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsEventIdRegister403JSONResponse Error

func (response PostV1EventsEventIdRegister403JSONResponse) VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsEventIdRegister404JSONResponse Error

func (response PostV1EventsEventIdRegister404JSONResponse) VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsEventIdRegister409JSONResponse Error

func (response PostV1EventsEventIdRegister409JSONResponse) VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostV1EventsEventIdRegister500JSONResponse Error

func (response PostV1EventsEventIdRegister500JSONResponse) VisitPostV1EventsEventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsEventIdRegistrationsRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Params  GetV1EventsEventIdRegistrationsParams
}

type GetV1EventsEventIdRegistrationsResponseObject interface {
	VisitGetV1EventsEventIdRegistrationsResponse(w http.ResponseWriter) error
}

type GetV1EventsEventIdRegistrations200JSONResponse struct {
	Cursor      *string        `json:"cursor,omitempty"`
	Data        []Registration `json:"data"`
	HasNextPage bool           `json:"hasNextPage"`
}

func (response GetV1EventsEventIdRegistrations200JSONResponse) VisitGetV1EventsEventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsEventIdRegistrations400JSONResponse Error

func (response GetV1EventsEventIdRegistrations400JSONResponse) VisitGetV1EventsEventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsEventIdRegistrations500JSONResponse Error

func (response GetV1EventsEventIdRegistrations500JSONResponse) VisitGetV1EventsEventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetV1EventsIdResponseObject interface {
	VisitGetV1EventsIdResponse(w http.ResponseWriter) error
}

type GetV1EventsId200JSONResponse struct {
	Event Event `json:"event"`
}

func (response GetV1EventsId200JSONResponse) VisitGetV1EventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsId400JSONResponse Error

func (response GetV1EventsId400JSONResponse) VisitGetV1EventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsId404JSONResponse Error

func (response GetV1EventsId404JSONResponse) VisitGetV1EventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV1EventsId500JSONResponse Error

func (response GetV1EventsId500JSONResponse) VisitGetV1EventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all events
	// (GET /v1/events)
	GetV1Events(ctx context.Context, request GetV1EventsRequestObject) (GetV1EventsResponseObject, error)
	// Create a new event
	// (POST /v1/events)
	PostV1Events(ctx context.Context, request PostV1EventsRequestObject) (PostV1EventsResponseObject, error)
	// Sign up for an event
	// (POST /v1/events/{eventId}/register)
	PostV1EventsEventIdRegister(ctx context.Context, request PostV1EventsEventIdRegisterRequestObject) (PostV1EventsEventIdRegisterResponseObject, error)
	// Get all registrations for an event
	// (GET /v1/events/{eventId}/registrations)
	GetV1EventsEventIdRegistrations(ctx context.Context, request GetV1EventsEventIdRegistrationsRequestObject) (GetV1EventsEventIdRegistrationsResponseObject, error)
	// Get an event
	// (GET /v1/events/{id})
	GetV1EventsId(ctx context.Context, request GetV1EventsIdRequestObject) (GetV1EventsIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetV1Events operation middleware
func (sh *strictHandler) GetV1Events(w http.ResponseWriter, r *http.Request, params GetV1EventsParams) {
	var request GetV1EventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1Events(ctx, request.(GetV1EventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1Events")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1EventsResponseObject); ok {
		if err := validResponse.VisitGetV1EventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1Events operation middleware
func (sh *strictHandler) PostV1Events(w http.ResponseWriter, r *http.Request) {
	var request PostV1EventsRequestObject

	var body PostV1EventsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1Events(ctx, request.(PostV1EventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1Events")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1EventsResponseObject); ok {
		if err := validResponse.VisitPostV1EventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1EventsEventIdRegister operation middleware
func (sh *strictHandler) PostV1EventsEventIdRegister(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request PostV1EventsEventIdRegisterRequestObject

	request.EventId = eventId

	var body PostV1EventsEventIdRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1EventsEventIdRegister(ctx, request.(PostV1EventsEventIdRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1EventsEventIdRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1EventsEventIdRegisterResponseObject); ok {
		if err := validResponse.VisitPostV1EventsEventIdRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1EventsEventIdRegistrations operation middleware
func (sh *strictHandler) GetV1EventsEventIdRegistrations(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID, params GetV1EventsEventIdRegistrationsParams) {
	var request GetV1EventsEventIdRegistrationsRequestObject

	request.EventId = eventId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1EventsEventIdRegistrations(ctx, request.(GetV1EventsEventIdRegistrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1EventsEventIdRegistrations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1EventsEventIdRegistrationsResponseObject); ok {
		if err := validResponse.VisitGetV1EventsEventIdRegistrationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1EventsId operation middleware
func (sh *strictHandler) GetV1EventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetV1EventsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1EventsId(ctx, request.(GetV1EventsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1EventsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1EventsIdResponseObject); ok {
		if err := validResponse.VisitGetV1EventsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
