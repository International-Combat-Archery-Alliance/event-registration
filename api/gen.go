//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	AlreadyExists        ErrorCode = "AlreadyExists"
	AuthError            ErrorCode = "AuthError"
	EmptyBody            ErrorCode = "EmptyBody"
	InputValidationError ErrorCode = "InputValidationError"
	InternalError        ErrorCode = "InternalError"
	InvalidBody          ErrorCode = "InvalidBody"
	InvalidCursor        ErrorCode = "InvalidCursor"
	LimitOutOfBounds     ErrorCode = "LimitOutOfBounds"
	NotFound             ErrorCode = "NotFound"
	RegistrationClosed   ErrorCode = "RegistrationClosed"
)

// Defines values for ExperienceLevel.
const (
	Advanced     ExperienceLevel = "Advanced"
	Intermediate ExperienceLevel = "Intermediate"
	Novice       ExperienceLevel = "Novice"
)

// Defines values for RegistrationType.
const (
	ByIndividual RegistrationType = "ByIndividual"
	ByTeam       RegistrationType = "ByTeam"
)

// Address defines model for Address.
type Address struct {
	// City City or town
	City string `json:"city"`

	// Country Country
	Country string `json:"country"`

	// PostalCode Postal code
	PostalCode string `json:"postalCode"`

	// State State or province
	State string `json:"state"`

	// Street Street address
	Street string `json:"street"`
}

// Error defines model for Error.
type Error struct {
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// ErrorCode defines model for ErrorCode.
type ErrorCode string

// Event defines model for Event.
type Event struct {
	AllowedTeamSizeRange Range               `json:"allowedTeamSizeRange"`
	EndTime              time.Time           `json:"endTime"`
	Id                   *openapi_types.UUID `json:"id,omitempty"`

	// ImageName A file name that exists in the UI assets to use as the logo.
	ImageName             *string                   `json:"imageName,omitempty"`
	Location              Location                  `json:"location"`
	Name                  string                    `json:"name"`
	RegistrationCloseTime time.Time                 `json:"registrationCloseTime"`
	RegistrationOptions   []EventRegistrationOption `json:"registrationOptions"`
	RulesDocLink          *string                   `json:"rulesDocLink,omitempty"`
	SignUpStats           *SignUpStats              `json:"signUpStats,omitempty"`
	StartTime             time.Time                 `json:"startTime"`
	Version               *int                      `json:"version,omitempty"`
}

// EventRegistrationOption defines model for EventRegistrationOption.
type EventRegistrationOption struct {
	Price            Money            `json:"price"`
	RegistrationType RegistrationType `json:"registrationType"`
}

// ExperienceLevel defines model for ExperienceLevel.
type ExperienceLevel string

// IndividualRegistration defines model for IndividualRegistration.
type IndividualRegistration struct {
	Email            openapi_types.Email `json:"email"`
	EventId          *openapi_types.UUID `json:"eventId,omitempty"`
	Experience       ExperienceLevel     `json:"experience"`
	HomeCity         string              `json:"homeCity"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Paid             *bool               `json:"paid,omitempty"`
	PlayerInfo       PlayerInfo          `json:"playerInfo"`
	RegisteredAt     *time.Time          `json:"registeredAt,omitempty"`
	RegistrationType RegistrationType    `json:"registrationType"`
	Version          *int                `json:"version,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Address Address `json:"address"`
	Name    string  `json:"name"`
}

// Money defines model for Money.
type Money struct {
	// Amount Minor units of money (i.e. 100 == $1 in USD)
	Amount   int    `json:"amount"`
	Currency string `json:"currency"`
}

// PlayerInfo defines model for PlayerInfo.
type PlayerInfo struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// Range defines model for Range.
type Range struct {
	Max int `json:"max"`
	Min int `json:"min"`
}

// Registration defines model for Registration.
type Registration struct {
	union json.RawMessage
}

// RegistrationType defines model for RegistrationType.
type RegistrationType string

// SignUpStats defines model for SignUpStats.
type SignUpStats struct {
	NumRosteredPlayers int `json:"numRosteredPlayers"`
	NumTeams           int `json:"numTeams"`
	NumTotalPlayers    int `json:"numTotalPlayers"`
}

// TeamRegistration defines model for TeamRegistration.
type TeamRegistration struct {
	CaptainEmail     openapi_types.Email `json:"captainEmail"`
	EventId          *openapi_types.UUID `json:"eventId,omitempty"`
	HomeCity         string              `json:"homeCity"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Paid             *bool               `json:"paid,omitempty"`
	Players          []PlayerInfo        `json:"players"`
	RegisteredAt     *time.Time          `json:"registeredAt,omitempty"`
	RegistrationType RegistrationType    `json:"registrationType"`
	TeamName         string              `json:"teamName"`
	Version          *int                `json:"version,omitempty"`
}

// GetEventsV1Params defines parameters for GetEventsV1.
type GetEventsV1Params struct {
	// Cursor Cursor of where to start from
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max amount of events to fetch
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetEventsV1EventIdRegistrationsParams defines parameters for GetEventsV1EventIdRegistrations.
type GetEventsV1EventIdRegistrationsParams struct {
	// Cursor Cursor of where to start from
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Max amount of registrations to fetch
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostEventsV1JSONRequestBody defines body for PostEventsV1 for application/json ContentType.
type PostEventsV1JSONRequestBody = Event

// PostEventsV1EventIdRegisterJSONRequestBody defines body for PostEventsV1EventIdRegister for application/json ContentType.
type PostEventsV1EventIdRegisterJSONRequestBody = Registration

// AsIndividualRegistration returns the union data inside the Registration as a IndividualRegistration
func (t Registration) AsIndividualRegistration() (IndividualRegistration, error) {
	var body IndividualRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIndividualRegistration overwrites any union data inside the Registration as the provided IndividualRegistration
func (t *Registration) FromIndividualRegistration(v IndividualRegistration) error {
	v.RegistrationType = "ByIndividual"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIndividualRegistration performs a merge with any union data inside the Registration, using the provided IndividualRegistration
func (t *Registration) MergeIndividualRegistration(v IndividualRegistration) error {
	v.RegistrationType = "ByIndividual"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTeamRegistration returns the union data inside the Registration as a TeamRegistration
func (t Registration) AsTeamRegistration() (TeamRegistration, error) {
	var body TeamRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamRegistration overwrites any union data inside the Registration as the provided TeamRegistration
func (t *Registration) FromTeamRegistration(v TeamRegistration) error {
	v.RegistrationType = "ByTeam"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamRegistration performs a merge with any union data inside the Registration, using the provided TeamRegistration
func (t *Registration) MergeTeamRegistration(v TeamRegistration) error {
	v.RegistrationType = "ByTeam"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Registration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"registrationType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Registration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ByIndividual":
		return t.AsIndividualRegistration()
	case "ByTeam":
		return t.AsTeamRegistration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Registration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Registration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all events
	// (GET /events/v1)
	GetEventsV1(w http.ResponseWriter, r *http.Request, params GetEventsV1Params)
	// Create a new event
	// (POST /events/v1)
	PostEventsV1(w http.ResponseWriter, r *http.Request)
	// Sign up for an event
	// (POST /events/v1/{eventId}/register)
	PostEventsV1EventIdRegister(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Get all registrations for an event
	// (GET /events/v1/{eventId}/registrations)
	GetEventsV1EventIdRegistrations(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID, params GetEventsV1EventIdRegistrationsParams)
	// Get an event
	// (GET /events/v1/{id})
	GetEventsV1Id(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEventsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetEventsV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsV1Params

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostEventsV1 operation middleware
func (siw *ServerInterfaceWrapper) PostEventsV1(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{"admin"})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEventsV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostEventsV1EventIdRegister operation middleware
func (siw *ServerInterfaceWrapper) PostEventsV1EventIdRegister(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", r.PathValue("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEventsV1EventIdRegister(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsV1EventIdRegistrations operation middleware
func (siw *ServerInterfaceWrapper) GetEventsV1EventIdRegistrations(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", r.PathValue("eventId"), &eventId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{"admin"})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsV1EventIdRegistrationsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsV1EventIdRegistrations(w, r, eventId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsV1Id operation middleware
func (siw *ServerInterfaceWrapper) GetEventsV1Id(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsV1Id(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/events/v1", wrapper.GetEventsV1)
	m.HandleFunc("POST "+options.BaseURL+"/events/v1", wrapper.PostEventsV1)
	m.HandleFunc("POST "+options.BaseURL+"/events/v1/{eventId}/register", wrapper.PostEventsV1EventIdRegister)
	m.HandleFunc("GET "+options.BaseURL+"/events/v1/{eventId}/registrations", wrapper.GetEventsV1EventIdRegistrations)
	m.HandleFunc("GET "+options.BaseURL+"/events/v1/{id}", wrapper.GetEventsV1Id)

	return m
}

type GetEventsV1RequestObject struct {
	Params GetEventsV1Params
}

type GetEventsV1ResponseObject interface {
	VisitGetEventsV1Response(w http.ResponseWriter) error
}

type GetEventsV1200JSONResponse struct {
	Cursor      *string `json:"cursor,omitempty"`
	Data        []Event `json:"data"`
	HasNextPage bool    `json:"hasNextPage"`
}

func (response GetEventsV1200JSONResponse) VisitGetEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1400JSONResponse Error

func (response GetEventsV1400JSONResponse) VisitGetEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1500JSONResponse Error

func (response GetEventsV1500JSONResponse) VisitGetEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1RequestObject struct {
	Body *PostEventsV1JSONRequestBody
}

type PostEventsV1ResponseObject interface {
	VisitPostEventsV1Response(w http.ResponseWriter) error
}

type PostEventsV1200JSONResponse Event

func (response PostEventsV1200JSONResponse) VisitPostEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1400JSONResponse Error

func (response PostEventsV1400JSONResponse) VisitPostEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1500JSONResponse Error

func (response PostEventsV1500JSONResponse) VisitPostEventsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1EventIdRegisterRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Body    *PostEventsV1EventIdRegisterJSONRequestBody
}

type PostEventsV1EventIdRegisterResponseObject interface {
	VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error
}

type PostEventsV1EventIdRegister200JSONResponse struct {
	Registration Registration `json:"registration"`
}

func (response PostEventsV1EventIdRegister200JSONResponse) VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1EventIdRegister400JSONResponse Error

func (response PostEventsV1EventIdRegister400JSONResponse) VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1EventIdRegister403JSONResponse Error

func (response PostEventsV1EventIdRegister403JSONResponse) VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1EventIdRegister404JSONResponse Error

func (response PostEventsV1EventIdRegister404JSONResponse) VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1EventIdRegister409JSONResponse Error

func (response PostEventsV1EventIdRegister409JSONResponse) VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsV1EventIdRegister500JSONResponse Error

func (response PostEventsV1EventIdRegister500JSONResponse) VisitPostEventsV1EventIdRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1EventIdRegistrationsRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Params  GetEventsV1EventIdRegistrationsParams
}

type GetEventsV1EventIdRegistrationsResponseObject interface {
	VisitGetEventsV1EventIdRegistrationsResponse(w http.ResponseWriter) error
}

type GetEventsV1EventIdRegistrations200JSONResponse struct {
	Cursor      *string        `json:"cursor,omitempty"`
	Data        []Registration `json:"data"`
	HasNextPage bool           `json:"hasNextPage"`
}

func (response GetEventsV1EventIdRegistrations200JSONResponse) VisitGetEventsV1EventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1EventIdRegistrations400JSONResponse Error

func (response GetEventsV1EventIdRegistrations400JSONResponse) VisitGetEventsV1EventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1EventIdRegistrations500JSONResponse Error

func (response GetEventsV1EventIdRegistrations500JSONResponse) VisitGetEventsV1EventIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1IdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetEventsV1IdResponseObject interface {
	VisitGetEventsV1IdResponse(w http.ResponseWriter) error
}

type GetEventsV1Id200JSONResponse struct {
	Event Event `json:"event"`
}

func (response GetEventsV1Id200JSONResponse) VisitGetEventsV1IdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1Id400JSONResponse Error

func (response GetEventsV1Id400JSONResponse) VisitGetEventsV1IdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1Id404JSONResponse Error

func (response GetEventsV1Id404JSONResponse) VisitGetEventsV1IdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsV1Id500JSONResponse Error

func (response GetEventsV1Id500JSONResponse) VisitGetEventsV1IdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all events
	// (GET /events/v1)
	GetEventsV1(ctx context.Context, request GetEventsV1RequestObject) (GetEventsV1ResponseObject, error)
	// Create a new event
	// (POST /events/v1)
	PostEventsV1(ctx context.Context, request PostEventsV1RequestObject) (PostEventsV1ResponseObject, error)
	// Sign up for an event
	// (POST /events/v1/{eventId}/register)
	PostEventsV1EventIdRegister(ctx context.Context, request PostEventsV1EventIdRegisterRequestObject) (PostEventsV1EventIdRegisterResponseObject, error)
	// Get all registrations for an event
	// (GET /events/v1/{eventId}/registrations)
	GetEventsV1EventIdRegistrations(ctx context.Context, request GetEventsV1EventIdRegistrationsRequestObject) (GetEventsV1EventIdRegistrationsResponseObject, error)
	// Get an event
	// (GET /events/v1/{id})
	GetEventsV1Id(ctx context.Context, request GetEventsV1IdRequestObject) (GetEventsV1IdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEventsV1 operation middleware
func (sh *strictHandler) GetEventsV1(w http.ResponseWriter, r *http.Request, params GetEventsV1Params) {
	var request GetEventsV1RequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsV1(ctx, request.(GetEventsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsV1ResponseObject); ok {
		if err := validResponse.VisitGetEventsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEventsV1 operation middleware
func (sh *strictHandler) PostEventsV1(w http.ResponseWriter, r *http.Request) {
	var request PostEventsV1RequestObject

	var body PostEventsV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEventsV1(ctx, request.(PostEventsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEventsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsV1ResponseObject); ok {
		if err := validResponse.VisitPostEventsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEventsV1EventIdRegister operation middleware
func (sh *strictHandler) PostEventsV1EventIdRegister(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request PostEventsV1EventIdRegisterRequestObject

	request.EventId = eventId

	var body PostEventsV1EventIdRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEventsV1EventIdRegister(ctx, request.(PostEventsV1EventIdRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEventsV1EventIdRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsV1EventIdRegisterResponseObject); ok {
		if err := validResponse.VisitPostEventsV1EventIdRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsV1EventIdRegistrations operation middleware
func (sh *strictHandler) GetEventsV1EventIdRegistrations(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID, params GetEventsV1EventIdRegistrationsParams) {
	var request GetEventsV1EventIdRegistrationsRequestObject

	request.EventId = eventId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsV1EventIdRegistrations(ctx, request.(GetEventsV1EventIdRegistrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsV1EventIdRegistrations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsV1EventIdRegistrationsResponseObject); ok {
		if err := validResponse.VisitGetEventsV1EventIdRegistrationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsV1Id operation middleware
func (sh *strictHandler) GetEventsV1Id(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetEventsV1IdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsV1Id(ctx, request.(GetEventsV1IdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsV1Id")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsV1IdResponseObject); ok {
		if err := validResponse.VisitGetEventsV1IdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
