AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ICAA Event Registration API

Parameters:
  architecture:
    Description: Architecure to run on
    Type: String
    # TODO: ideally this would be arm, but it's been a struggle to get arm to actually work with SAM
    Default: x86_64
    AllowedValues:
      - arm64
      - x86_64
  StripeSecretKey:
    Type: String
    NoEcho: true
    Description: Sandbox stripe secret key for testing

Mappings:
  attributes:
    dynamo:
      tableName: event-registration

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        DYNAMO_TABLE_NAME: !FindInMap [attributes, dynamo, tableName]
        STRIPE_SECRET_KEY: !Ref StripeSecretKey

Resources:
  EventRegistrationHttp:
    Type: AWS::Serverless::HttpApi
  EventsApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: api.icaa.world
      ApiId: !Ref EventRegistrationHttp
      Stage: !Ref EventRegistrationHttp.Stage
      ApiMappingKey: events
  ICAAEventRegistration:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - !Ref architecture
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: 
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/event-registration"
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/event-registration/index/*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cfTurnstileSecretKey"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/googleServiceAccount"
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"
      Events:
        APIEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref EventRegistrationHttp
            Path: '/{proxy+}'
            Method: ANY
    Metadata:
      DockerTag: v1
      DockerContext: .
      Dockerfile: Dockerfile
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ICAAEventRegistration}
      RetentionInDays: 30 

